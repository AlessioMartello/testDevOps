{
	"name": "dataflowHR_Health Shield",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "WorkerExcel",
						"type": "DatasetReference"
					},
					"name": "Worker"
				},
				{
					"dataset": {
						"referenceName": "BenefitPlanEmployeeExcel",
						"type": "DatasetReference"
					},
					"name": "BenefitPlanEmployee"
				},
				{
					"dataset": {
						"referenceName": "IdentificationExcel",
						"type": "DatasetReference"
					},
					"name": "Identification"
				},
				{
					"dataset": {
						"referenceName": "BenefitsCoverageOptionExcel",
						"type": "DatasetReference"
					},
					"name": "BenefitsCoverageOption"
				},
				{
					"dataset": {
						"referenceName": "WorkerPersonalContactExcel",
						"type": "DatasetReference"
					},
					"name": "WorkerPersonalContact"
				},
				{
					"dataset": {
						"referenceName": "EmploymentV2Excel",
						"type": "DatasetReference"
					},
					"name": "EmploymentV2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ReportOut",
						"type": "DatasetReference"
					},
					"name": "ReportOut"
				}
			],
			"transformations": [
				{
					"name": "BenefitPlanCoverageOption"
				},
				{
					"name": "JoinIdentificationNINO"
				},
				{
					"name": "JoinContacts"
				},
				{
					"name": "PivotContacts",
					"description": "Pivots a worker's contacts into separate columns."
				},
				{
					"name": "RankWindow"
				},
				{
					"name": "AddRank",
					"description": "Takes all columns from previous stream and adds a number to the child in a new column based on Relationship type."
				},
				{
					"name": "joinBackOtherFields"
				},
				{
					"name": "joinBenefitsandEligibility"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PERSONNELNUMBER as string,",
				"          ADDEDFIELDS as string,",
				"          ADDRESSBOOKS as string,",
				"          ADDRESSCITY as string,",
				"          ADDRESSCOUNTRYREGIONID as string,",
				"          ADDRESSCOUNTRYREGIONISOCODE as string,",
				"          ADDRESSCOUNTY as string,",
				"          ADDRESSDISTRICTNAME as string,",
				"          ADDRESSLOCATIONID as string,",
				"          ADDRESSNAMEDESCRIPTION as string,",
				"          ADDRESSPURPOSE as string,",
				"          ADDRESSSTATE as string,",
				"          ADDRESSSTREET as string,",
				"          ADDRESSVALIDFROM as string,",
				"          ADDRESSVALIDTO as string,",
				"          ADDRESSZIPCODE as string,",
				"          ALLOWREHIRE as string,",
				"          ANNIVERSARYDATETIME as string,",
				"          BIRTHDATE as string,",
				"          CITIZENSHIPCOUNTRYREGION as string,",
				"          DECEASEDDATE as string,",
				"          DISABLEDVERIFICATIONDATE as string,",
				"          EDUCATION as string,",
				"          ELECTRONICLOCATIONID as string,",
				"          ETHNICORIGINID as string,",
				"          EXPATRIATERULINGVALIDFROM as string,",
				"          EXPATRIATERULINGVALIDTO as string,",
				"          FATHERBIRTHCOUNTRYREGION as string,",
				"          FIRSTNAME as string,",
				"          GENDER as string,",
				"          IDENTITYEMAIL as string,",
				"          IDENTITYPROVIDER as string,",
				"          ISDISABLED as string,",
				"          ISDISABLEDVETERAN as string,",
				"          ISEXPATRIATERULINGAPPLICABLE as string,",
				"          ISFULLTIMESTUDENT as string,",
				"          KNOWNAS as string,",
				"          LANGUAGEID as string,",
				"          LASTNAME as string,",
				"          LASTNAMEPREFIX as string,",
				"          MARITALSTATUS as string,",
				"          MIDDLENAME as string,",
				"          MILITARYSERVICEENDDATE as string,",
				"          MILITARYSERVICESTARTDATE as string,",
				"          MOTHERBIRTHCOUNTRYREGION as string,",
				"          NAME as string,",
				"          NAMEALIAS as string,",
				"          NAMESEQUENCEDISPLAYAS as string,",
				"          NATIONALITYCOUNTRYREGION as string,",
				"          NATIVELANGUAGEID as string,",
				"          NUMBEROFDEPENDENTS as string,",
				"          OBJECTID as string,",
				"          OFFICELOCATION as string,",
				"          OFFICELOCATIONID as string,",
				"          ORIGINALHIREDATETIME as string,",
				"          PARTYNUMBER as string,",
				"          PARTYTYPE as string,",
				"          PERSONALSUFFIX as string,",
				"          PERSONALTITLE as string,",
				"          PERSONBIRTHCITY as string,",
				"          PERSONBIRTHCOUNTRYREGION as string,",
				"          PERSONDETAILSVALIDFROM as string,",
				"          PERSONDETAILSVALIDTO as string,",
				"          PERSONUSERVALIDFROM as string,",
				"          PERSONUSERVALIDTO as string,",
				"          PHONETICFIRSTNAME as string,",
				"          PHONETICLASTNAME as string,",
				"          PHONETICMIDDLENAME as string,",
				"          PRIMARYADDRESSLOCATION as string,",
				"          PRIMARYCONTACTEMAIL as string,",
				"          PRIMARYCONTACTEMAILDESCRIPTION as string,",
				"          PRIMARYCONTACTEMAILISIM as string,",
				"          PRIMARYCONTACTEMAILISPRIVATE as string,",
				"          PRIMARYCONTACTEMAILPURPOSE as string,",
				"          PRIMARYCONTACTFACEBOOK as string,",
				"          PRIMARYCONTACTFACEBOOKDESCRIPTION as string,",
				"          PRIMARYCONTACTFACEBOOKISPRIVATE as string,",
				"          PRIMARYCONTACTFACEBOOKPURPOSE as string,",
				"          PRIMARYCONTACTFAX as string,",
				"          PRIMARYCONTACTFAXDESCRIPTION as string,",
				"          PRIMARYCONTACTFAXEXTENSION as string,",
				"          PRIMARYCONTACTFAXISPRIVATE as string,",
				"          PRIMARYCONTACTFAXPURPOSE as string,",
				"          PRIMARYCONTACTLINKEDIN as string,",
				"          PRIMARYCONTACTLINKEDINDESCRIPTION as string,",
				"          PRIMARYCONTACTLINKEDINISPRIVATE as string,",
				"          PRIMARYCONTACTLINKEDINPURPOSE as string,",
				"          PRIMARYCONTACTPHONE as string,",
				"          PRIMARYCONTACTPHONEDESCRIPTION as string,",
				"          PRIMARYCONTACTPHONEEXTENSION as string,",
				"          PRIMARYCONTACTPHONEISMOBILE as string,",
				"          PRIMARYCONTACTPHONEISPRIVATE as string,",
				"          PRIMARYCONTACTPHONEPURPOSE as string,",
				"          PRIMARYCONTACTTWITTER as string,",
				"          PRIMARYCONTACTTWITTERDESCRIPTION as string,",
				"          PRIMARYCONTACTTWITTERISPRIVATE as string,",
				"          PRIMARYCONTACTTWITTERPURPOSE as string,",
				"          PRIMARYCONTACTURL as string,",
				"          PRIMARYCONTACTURLDESCRIPTION as string,",
				"          PRIMARYCONTACTURLISPRIVATE as string,",
				"          PRIMARYCONTACTURLPURPOSE as string,",
				"          PROFESSIONALSUFFIX as string,",
				"          PROFESSIONALTITLE as string,",
				"          SENIORITYDATE as string,",
				"          SUMMARYVALIDFROM as string,",
				"          SUMMARYVALIDTO as string,",
				"          TITLEID as string,",
				"          USER as string,",
				"          VETERANSTATUSID as string,",
				"          WORKERSTATUS as string,",
				"          WORKERTYPE as string,",
				"          WORKSFROMHOME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Worker",
				"source(output(",
				"          PERSONNELNUMBER as string,",
				"          PLANPERIODID as string,",
				"          PLANID as string,",
				"          COVERAGEOPTIONID as string,",
				"          VALIDFROM as string,",
				"          VALIDTO as string,",
				"          ADMINISTRATIVESTARTDATETIME as string,",
				"          AMOUNTADMIN as string,",
				"          AMOUNTEMPLOYEE as string,",
				"          AMOUNTEMPLOYER as string,",
				"          ANNUALCONTRIBUTION as string,",
				"          BUNDLEDID as string,",
				"          BUNDLEMASTER as string,",
				"          CANCELLATION as string,",
				"          CANCELLATIONBY as string,",
				"          CANCELLATIONDATETIME as string,",
				"          CANCELREASONCODEID as string,",
				"          COVERAGEAMOUNT as string,",
				"          COVERAGECODE as string,",
				"          COVERAGEENDDATETIME as string,",
				"          COVERAGESTARTDATETIME as string,",
				"          CREDITAPPLIEDVALUE as string,",
				"          CREDITHASRATE as string,",
				"          CREDITLIFEEVENTOPENALLOCATION as string,",
				"          CREDITLIFEEVENTPREVENTADDALLOCATION as string,",
				"          CREDITLIFEEVENTPREVENTSUBALLOCATION as string,",
				"          DEDUCTIONENDDATETIME as string,",
				"          DEDUCTIONSTARTDATETIME as string,",
				"          DEFAULTOPTION as string,",
				"          ENROLLMENTCONFIRMED as string,",
				"          ENROLLMENTCONFIRMEDBY as string,",
				"          ENROLLMENTCONFIRMEDDATETIME as string,",
				"          ENROLLMENTSTARTDATETIME as string,",
				"          ESSCHECKEDOUT as string,",
				"          LEGALENTITYID as string,",
				"          LIFEEVENT as string,",
				"          LIFEEVENTALLOWCANCELLATION as string,",
				"          LIFEEVENTALLOWCANCELLATIONPREV as string,",
				"          LIFEEVENTAUTOCANCELPLAN as string,",
				"          LIFEEVENTAUTOCANCELPLANPREV as string,",
				"          LIFEEVENTAUTOREOPENELIGIBILITY as string,",
				"          LIFEEVENTAUTOREOPENELIGIBILITYPREV as string,",
				"          LIFEEVENTCHANGECOVERAGE as string,",
				"          LIFEEVENTCHANGECOVERAGEPREV as string,",
				"          LIFEEVENTCHANGETONEWPLAN as string,",
				"          LIFEEVENTCHANGETONEWPLANPREV as string,",
				"          LIFEEVENTPREV as string,",
				"          LIFEEVENTREPORTINGWINDOW as string,",
				"          LIFEEVENTREPORTINGWINDOWPREV as string,",
				"          LIFEEVENTTYPES as string,",
				"          PAYPERIOD as string,",
				"          PERCENTAGE as string,",
				"          PERIODEMPLOYEENAME as string,",
				"          PLANDESCRIPTION as string,",
				"          PLANTYPECODE as string,",
				"          PLANTYPEDESIGNEETYPE as string,",
				"          PLANTYPEID as string,",
				"          PROGRAMID as string,",
				"          REASONCODEID as string,",
				"          REOPENREASONCODEID as string,",
				"          STATUS as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> BenefitPlanEmployee",
				"source(output(",
				"          PARTYNUMBER as string,",
				"          IDENTIFICATIONTYPEID as string,",
				"          IDENTIFICATIONNUMBER as string,",
				"          DESCRIPTION as string,",
				"          ENTRYTYPE as string,",
				"          EXPIRATIONDATE as string,",
				"          ISPRIMARY as string,",
				"          ISSUEDDATE as string,",
				"          ISSUINGAGENCYID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Identification",
				"source(output(",
				"          COVERAGEOPTIONID as string,",
				"          PERSONALCONTACTSELIGIBILITYOPTIONID as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> BenefitsCoverageOption",
				"source(output(",
				"          WORKERPERSONNELNUMBER as string,",
				"          CONTACTPERSONPARTYNUMBER as string,",
				"          RELATIONSHIPTYPE as string,",
				"          RELATIONSHIPVALIDFROM as string,",
				"          BIRTHDATE as string,",
				"          CONTACTFIRSTNAME as string,",
				"          CONTACTLASTNAME as string,",
				"          CONTACTLASTNAMEPREFIX as string,",
				"          CONTACTMIDDLENAME as string,",
				"          DEPENDENTCOURTORDEREDEXPIRATIONDATE as string,",
				"          DISABLEDVERIFICATIONDATE as string,",
				"          EMERGENCYCONTACTPRIMARYSECONDARY as string,",
				"          GENDER as string,",
				"          ISBENEFICIARY as string,",
				"          ISDEPENDENT as string,",
				"          ISDEPENDENTCOURTORDERED as string,",
				"          ISDEPENDENTDOMESTICPARTNERVERIFIED as string,",
				"          ISDISABLED as string,",
				"          ISEMERGENCYCONTACT as string,",
				"          ISFULLTIMESTUDENT as string,",
				"          RELATIONSHIPVALIDTO as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> WorkerPersonalContact",
				"source(output(",
				"          PERSONNELNUMBER as string,",
				"          LEGALENTITYID as string,",
				"          EMPLOYMENTID as string,",
				"          CALENDARID as string,",
				"          DIMENSIONDISPLAYVALUE as string,",
				"          EMPLOYMENTENDDATE as string,",
				"          EMPLOYMENTSTARTDATE as string,",
				"          REGULATORYESTABLISHMENTID as string,",
				"          WORKERTYPE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> EmploymentV2",
				"BenefitPlanEmployee, BenefitsCoverageOption join(BenefitPlanEmployee@COVERAGEOPTIONID == BenefitsCoverageOption@COVERAGEOPTIONID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> BenefitPlanCoverageOption",
				"Worker, Identification join(Worker@PARTYNUMBER == Identification@PARTYNUMBER",
				"     && \"NINO\" == IDENTIFICATIONTYPEID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'right')~> JoinIdentificationNINO",
				"JoinIdentificationNINO, WorkerPersonalContact join(PERSONNELNUMBER == WORKERPERSONNELNUMBER,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinContacts",
				"joinBenefitsandEligibility pivot(groupBy(Worker@PERSONNELNUMBER,",
				"          VALIDFROM,",
				"          VALIDTO),",
				"     pivotBy(NumberedChildRelType, ['Spouse', 'Child 1', 'Child 2', 'Child 3', 'Child 4', 'Child 5', 'Child 6', 'Child 7', 'Child 8', null]),",
				"     { Last Name} = first(CONTACTLASTNAME),",
				"          { First Name} = first(CONTACTFIRSTNAME),",
				"          { Birth Date} = first(WorkerPersonalContact@BIRTHDATE),",
				"          { Sex} = first(WorkerPersonalContact@GENDER),",
				"     columnNaming: '$V$N',",
				"     lateral: false) ~> PivotContacts",
				"JoinContacts window(over(PERSONNELNUMBER),",
				"     asc(CONTACTPERSONPARTYNUMBER, true),",
				"     RankCol = rank()) ~> RankWindow",
				"RankWindow derive(NumberedChildRelType = iif(equals(RELATIONSHIPTYPE,\"Child\"), concat(RELATIONSHIPTYPE, \" \", toString(RankCol)), RELATIONSHIPTYPE)) ~> AddRank",
				"PivotContacts, joinBenefitsandEligibility join(PivotContacts@PERSONNELNUMBER == Worker@PERSONNELNUMBER",
				"     && PivotContacts@VALIDFROM == BenefitPlanEmployee@VALIDFROM",
				"     && PivotContacts@VALIDTO == BenefitPlanEmployee@VALIDTO,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinBackOtherFields",
				"AddRank, BenefitPlanCoverageOption join(Worker@PERSONNELNUMBER == BenefitPlanEmployee@PERSONNELNUMBER",
				"     && RELATIONSHIPTYPE == PERSONALCONTACTSELIGIBILITYOPTIONID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinBenefitsandEligibility",
				"joinBackOtherFields select(mapColumn(",
				"          {First Name} = FIRSTNAME,",
				"          Surname = LASTNAME,",
				"          {Address Line 1} = ADDRESSSTREET,",
				"          City = ADDRESSCITY,",
				"          County = ADDRESSCOUNTY,",
				"          Postcode = ADDRESSZIPCODE,",
				"          {Birth/Date (DD/MM/YYYY)} = Worker@BIRTHDATE,",
				"          {Personal Email Address} = IDENTITYEMAIL,",
				"          {Payroll Number or Unique Employee Reference Number } = PivotContacts@PERSONNELNUMBER,",
				"          {Customer Name} = PERIODEMPLOYEENAME,",
				"          Location = PRIMARYADDRESSLOCATION,",
				"          {Company Paid Cover} = AMOUNTEMPLOYEE,",
				"          {Partner First Name} = CONTACTFIRSTNAME,",
				"          {Partner Surname} = CONTACTLASTNAME,",
				"          {Partner Birth/Date (DD/MM/YYYY)} = WorkerPersonalContact@BIRTHDATE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Product } as string,",
				"          {Type Of Cover} as string,",
				"          {National Insurance} as string,",
				"          Location as string,",
				"          Surname as string,",
				"          Initial as string,",
				"          Forename as string,",
				"          Title as string,",
				"          DOB as string,",
				"          Sex as string,",
				"          Building as string,",
				"          Street as string,",
				"          {Sub-Street} as string,",
				"          {City/Town} as string,",
				"          {Post Code} as string,",
				"          Telephone as string,",
				"          Email as string,",
				"          {S Title17} as string,",
				"          {S Title18} as string,",
				"          {Spouse Surname} as string,",
				"          {S Forename} as string,",
				"          {S DOB} as string,",
				"          {S Sex} as string,",
				"          Prop_23 as string,",
				"          {Child 1 Title} as string,",
				"          {Child 1 Surname} as string,",
				"          {Child 1 Initial} as string,",
				"          {Child 1 Forename} as string,",
				"          {Child 1 DOB} as string,",
				"          {Child 1 Sex} as string,",
				"          Prop_30 as string,",
				"          {Child 2 Title} as string,",
				"          {Child 2 Surname} as string,",
				"          {Child 2 Initial} as string,",
				"          {Child 2 Forename} as string,",
				"          {Child 2 DOB} as string,",
				"          {Child 2 Sex} as string,",
				"          Prop_37 as string,",
				"          {Child 3 Title} as string,",
				"          {Child 3 Surname} as string,",
				"          {Child 3 Initial} as string,",
				"          {Child 3 Forename} as string,",
				"          {Child 3 DOB} as string,",
				"          {Child 3 Sex} as string,",
				"          {Child 4 Title} as string,",
				"          {Child 4 Surname} as string,",
				"          {Child 4 Initial} as string,",
				"          {Child 4 Forename} as string,",
				"          {Child 4 DOB} as string,",
				"          {Child 4 Sex} as string,",
				"          {Child 5 Title} as string,",
				"          {Child 5 Surname} as string,",
				"          {Child 5 Initial} as string,",
				"          {Child 5 Forename} as string,",
				"          {Child 5 DOB} as string,",
				"          {Child 5 Sex} as string,",
				"          {Child 6 Title} as string,",
				"          {Child 6 Surname} as string,",
				"          {Child 6 Initial} as string,",
				"          {Child 6 Forename} as string,",
				"          {Child 6 DOB} as string,",
				"          {Child 6 Sex} as string,",
				"          {Child 7 Title} as string,",
				"          {Child 7 Surname} as string,",
				"          {Child 7 Initial} as string,",
				"          {Child 7 Forename} as string,",
				"          {Child 7 DOB} as string,",
				"          {Child 7 Sex} as string,",
				"          {Child 8 Title} as string,",
				"          {Child 8 Surname} as string,",
				"          {Child 8 Initial} as string,",
				"          {Child 8 Forename} as string,",
				"          {Child 8 DOB} as string,",
				"          {Child 8 Sex} as string",
				"     ),",
				"     partitionFileNames:['Health Shield.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> ReportOut"
			]
		}
	}
}